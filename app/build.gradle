buildscript {
  repositories {
    maven { url 'https://maven.fabric.io/public' }
  }

  dependencies {
    classpath 'io.fabric.tools:gradle:1.+'
  }
}
// Manifest version information!
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
  maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: '../analysis/analysis.gradle'

def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))
def projectName = "alamo-drafthouse-android"
android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion
  signingConfigs {
    debug {
      keyAlias 'alamo-android-debug'
      keyPassword 'alamod'
      storeFile file('keystores/alamo-android-debug.jks')
      storePassword 'alamod'
    }
    release {
      keyAlias 'alamo-android-release'
      keyPassword 'alamor'
      storeFile file('keystores/alamo-android-release.jks')
      storePassword 'alamor'
    }
  }
  defaultConfig {
    applicationId "com.alamodrafthouse"

    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion

    versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    vectorDrawables.useSupportLibrary = true
    //buildConfigField 'String', "BASE_URL", '\"https://test-web.drafthouse.com/s/mother/v1/\"'
    buildConfigField "String", "BASE_URL", "\"http://api-v2.hearthis.at\""
  }
  packagingOptions {
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    exclude 'LICENSE.txt'
  }
  dexOptions {
    preDexLibraries = preDexEnabled
  }
  dataBinding {
    enabled = true
  }
  buildTypes {
    release {
      debuggable false
      versionNameSuffix '-release'
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-common.txt',
          'proguard-specific.txt'
      signingConfig signingConfigs.release
      buildConfigField 'boolean', "ENABLE_LOGGING", 'false'
    }
    debug {
      debuggable true
      versionNameSuffix '-debug'
      applicationIdSuffix '.debug'
      signingConfig signingConfigs.debug
      buildConfigField 'boolean', "ENABLE_LOGGING", 'true'
    }
  }
  lintOptions {
    lintConfig file('../analysis/lint/lint.xml')
    htmlOutput file("$project.buildDir/reports/lint/lint-reports.html")
    xmlOutput file("$project.buildDir/reports/lint/lint-reports.xml")

    abortOnError false
  }
}
// Used to name our output apk
task renameApkFilesToAddVersionInfo {
  if (System.getenv()["bamboo_buildNumber"] != null) {

    def bambooBuildNumber = System.getenv()["bamboo_buildNumber"];
    def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
    def gitBranchName = 'git rev-parse --abbrev-ref HEAD'.execute([], project.rootDir).text.trim()
    def apkSuffix = versionMajor + '.' + versionMinor + '.' + versionPatch;
    def variableFile = new File("build/variables.var")
    // Ugly - find a way to refactor to do this.
    if (variableFile.exists()) {
      variableFile.delete();
    } else {
      def buildDir = new File("build")
      if (!buildDir.exists()) {
        buildDir.mkdir()
      }
      variableFile.createNewFile();
    }

    // Used to name our output apk
    android.applicationVariants.all { variant ->
      variant.mergedFlavor.versionName =
          "${versionMajor}.${versionMinor}.${versionPatch}-${gitBranchName}-${gitSha}-${bambooBuildNumber}";
      variant.outputs.each { output ->
        def outputFile = output.outputFile
        if (outputFile != null && outputFile.name.endsWith('.apk')) {
          output.outputFile = file(
              "$project.buildDir/${projectName}-${variant.name}-${apkSuffix}-${gitSha}-${bambooBuildNumber}.apk")
        }
      }
      variableFile.withWriterAppend { out ->
        out.writeLine(
            "${variant.name}=${projectName}-${variant.name}-${apkSuffix}-${gitSha}-${bambooBuildNumber}.apk")
        out.writeLine("${variant.name}LpName=${gitSha}-${variant.name}-${gitBranchName}")
      }
    }
  }
}
// Required for annotation processing plugins like Dagger
kapt {
  generateStubs = true
}
dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])

  // Android Support Libs
  compile "com.android.support:appcompat-v7:${rootProject.ext.supportLibraryVersion}"
  compile "com.android.support:recyclerview-v7:${rootProject.ext.supportLibraryVersion}"

  //DataBinding
  kapt 'com.android.databinding:compiler:2.3.0'

  //Dagger2
  compile "com.google.dagger:dagger:${dagger2Version}"
  kapt "com.google.dagger:dagger-compiler:${dagger2Version}"
  provided 'org.glassfish:javax.annotation:10.0-b28'

  //Retrofit2
  compile "com.squareup.retrofit2:retrofit:${retrofitVersion}"
  compile "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
  compile "com.squareup.retrofit2:adapter-rxjava:${retrofitVersion}"
  compile "com.squareup.okhttp3:logging-interceptor:${okhttpVersion}"

  //Rx
  compile "io.reactivex:rxandroid:${rxAndroidVersion}"

  //Timber
  compile "com.jakewharton.timber:timber:${timberVersion}"

  //Glide
  compile "com.github.bumptech.glide:glide:${glideVersion}"

  androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
    exclude group: 'com.android.support', module: 'support-annotations'
  })

  //Kotlin
  compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

  //Card IO
  compile 'io.card:android-sdk:5.5.0'

  testCompile 'junit:junit:4.12'
  compile('com.crashlytics.sdk.android:crashlytics:2.6.6@aar') {
    transitive = true;
  }
}

